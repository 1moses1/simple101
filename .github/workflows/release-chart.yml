name: Release Helm Chart (chart-releaser)

on:
  push:
    tags:
      - 'v*'

jobs:
  release-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pages: write

    env:
      CHARTS_DIR: charts
      YQ_VERSION: v4.40.5
      GPG_NAME: "${{ github.actor }}"
      GPG_EMAIL: "${{ github.actor }}@users.noreply.github.com"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name "$GPG_NAME"
          git config user.email "$GPG_EMAIL"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.3

      - name: Install helpers (yq)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: If running on a tag, set Chart.yaml version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          CLEAN_VERSION="${VERSION#v}"
          echo "Setting chart version to $CLEAN_VERSION"
          yq -i ".version = \"$CLEAN_VERSION\"" "$CHARTS_DIR/Chart.yaml"
          git add "$CHARTS_DIR/Chart.yaml" && git commit -m "ci: set chart version $CLEAN_VERSION" || true

      - name: Generate ephemeral GPG key
        run: |
          export GNUPGHOME="$(mktemp -d)"
          gpg --batch --passphrase '' --quick-gen-key "$GPG_NAME <$GPG_EMAIL>" rsa4096 sign 1d
          KEY_TAG="${GITHUB_REF_NAME:-$(date +%s)}"
          gpg --homedir "$GNUPGHOME" --armor --export "$GPG_EMAIL" > "public-key-${KEY_TAG}.asc"
          echo "GNUPGHOME=$GNUPGHOME" >> $GITHUB_ENV

      - name: Helm deps
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          (cd "$CHARTS_DIR" && helm dependency update || true)

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: .
        env:
          CR_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub Pages and publish charts
        run: |
          set -e
          
          # Create or switch to gh-pages branch
          git fetch origin gh-pages:gh-pages || true
          git checkout gh-pages || git checkout --orphan gh-pages
          
          # If this is a new orphan branch, clean it up
          if [ ! -f index.yaml ]; then
            git rm -rf . || true
          fi
          
          # Create artifacthub-repo.yml if it doesn't exist
          if [ ! -f artifacthub-repo.yml ]; then
            cat > artifacthub-repo.yml <<'EOF'
repositoryID: ""
owners:
  - name: "OPSEC"
    email: "security@example.com"
EOF
            git add artifacthub-repo.yml
          fi
          
          # Create index.html for the repository
          cat > index.html <<'EOF'
<!DOCTYPE html>
<html>
<head>
  <title>Helm Repository</title>
  <meta http-equiv="refresh" content="0; url=./index.yaml">
</head>
<body>
  <h1>Helm Repository</h1>
  <p>This is a Helm chart repository. See <a href="./index.yaml">index.yaml</a> for available charts.</p>
</body>
</html>
EOF
          
          # Add .nojekyll to disable Jekyll processing
          touch .nojekyll
          
          # Add all files and commit
          git add .
          git commit -m "chore: setup GitHub Pages for Helm repository" || true
          git push origin gh-pages
          
          # Return to main branch for chart-releaser
          git checkout main

      - name: Create release with signed chart
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release if it doesn't exist
          RELEASE_EXISTS=$(gh release view "${{ github.ref_name }}" --json id --jq '.id' 2>/dev/null || echo "")
          if [ -z "$RELEASE_EXISTS" ]; then
            gh release create "${{ github.ref_name }}" \
              --title "Release ${{ github.ref_name }}" \
              --notes "Helm chart release ${{ github.ref_name }} with provenance signing.

Generated by KRO Platform.

## Installation

```bash
helm repo add my-charts https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
helm repo update
helm install my-release my-charts/chart-name
```" \
              --draft=false \
              --prerelease=false
          fi
          
          # Attach public key to release
          if [ -f "public-key-${{ github.ref_name }}.asc" ]; then
            gh release upload "${{ github.ref_name }}" "public-key-${{ github.ref_name }}.asc" --clobber
          fi
